---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: centralized-kubecost
  namespace: ${releaseNamespace}
spec:
  dependsOn:
    - namespace: ${releaseNamespace}
      name: traefik
  chart:
    spec:
      chart: kubecost
      sourceRef:
        kind: HelmRepository
        name: mesosphere.github.io-charts-stable
        namespace: kommander-flux
      version: "0.18.0"
  interval: 15s
  install:
    remediation:
      retries: 30
    createNamespace: true
  upgrade:
    remediation:
      retries: 30
  releaseName: centralized-kubecost
  valuesFrom:
    - kind: ConfigMap
      name: centralized-kubecost-0.18.0-d2iq-defaults
  targetNamespace: kubecost
---
# Enterprise Kubecost key
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-configs
  namespace: kubecost
data:
  key: kc-d2780297293
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubecost-configmap-edit
  namespace: kubecost
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubecost-configmap-edit
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubecost-configmap-edit
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubecost-configmap-edit
subjects:
  - kind: ServiceAccount
    name: kubecost-configmap-edit
    namespace: kubecost
---
apiVersion: batch/v1
kind: Job
metadata:
  name: copy-kubecost-grafana-datasource-cm
  namespace: kubecost
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "4"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: copy-kubecost-grafana-datasource-cm
    spec:
      serviceAccountName: kubecost-configmap-edit
      restartPolicy: OnFailure
      containers:
        - name: kubectl
          image: "${kubetoolsImageRepository:=bitnami/kubectl}:${kubetoolsImageTag:=1.21.3}"
          command:
            - sh
            - -c
            - |
              kubectl get configmap grafana-datasource --namespace=kubecost -o yaml | sed 's/namespace: kubecost/namespace: ${releaseNamespace}/' | sed 's/name: grafana-datasource/name: centralized-kubecost-grafana-datasource/' | grep -v '^\s*uid:\s' | grep -v '^\s*resourceVersion:\s' | kubectl apply -f -
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kommander-kubecost-thanos-client-cert
  namespace: kubecost
  annotations:
    "helm.sh/hook": pre-install
spec:
  commonName: client.thanos.kubecost.localhost.localdomain
  dnsNames:
    - client.thanos.kubecost.localhost.localdomain
  duration: 87600h
  subject:
    organizations:
      - D2iQ
  secretName: kommander-kubecost-thanos-client-tls
  issuerRef:
    name: kommander-ca
    kind: ClusterIssuer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubecost-thanos-configmap-edit
  namespace: kubecost
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubecost-thanos-configmap-edit
  namespace: kubecost
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubecost-thanos-configmap-edit
  namespace: kubecost
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubecost-thanos-configmap-edit
subjects:
  - kind: ServiceAccount
    name: kubecost-thanos-configmap-edit
    namespace: kubecost
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-kubecost-thanos-query-stores-configmap
  namespace: kubecost
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "4"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: create-kubecost-thanos-query-stores-configmap
    spec:
      serviceAccountName: kubecost-thanos-configmap-edit
      restartPolicy: OnFailure
      containers:
        - name: kubectl
          image: "${kubetoolsImageRepository:=bitnami/kubectl}:${kubetoolsImageTag:=1.21.3}"
          command:
            - sh
            - "-c"
            - |
              /bin/bash <<'EOF'
              set -o nounset
              set -o errexit
              set -o pipefail

              echo "checking if kubecost-thanos-query-stores configmap exists"

              RES=$(set -o errexit; kubectl get configmap --ignore-not-found kubecost-thanos-query-stores)
              if [[ $RES == "" ]]; then
                echo "kubecost-thanos-query-stores configmap does not exist - creating"
                printf '%s\n' "apiVersion: v1" "kind: ConfigMap" "metadata:" "  name: kubecost-thanos-query-stores" "data:" "  stores.yaml: |-" "    - targets: []" > /tmp/kubecost-thanos-query-stores.yaml
                kubectl apply -f /tmp/kubecost-thanos-query-stores.yaml
                exit 0
              fi

              echo "kubecost-thanos-query-stores configmap already exists - no need to create"
              EOF
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kubecost-thanos-query-stores-configmap-cleanup
  namespace: kubecost
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: kubecost-thanos-query-stores-configmap-cleanup
    spec:
      serviceAccountName: kubecost-thanos-configmap-edit
      containers:
        - name: kubectl
          image: "${kubetoolsImageRepository:=bitnami/kubectl}:${kubetoolsImageTag:=1.21.3}"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - kubectl delete configmap --ignore-not-found kubecost-thanos-query-stores
      restartPolicy: OnFailure
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dkp-centralized-kubecost-view
rules:
  - nonResourceURLs:
      - /dkp/kommander/kubecost
      - /dkp/kommander/kubecost/*
    verbs:
      - get
      - head
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dkp-centralized-kubecost-edit
rules:
  - nonResourceURLs:
      - /dkp/kommander/kubecost
      - /dkp/kommander/kubecost/*
    verbs:
      - get
      - head
      - post
      - put
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dkp-centralized-kubecost-admin
rules:
  - nonResourceURLs:
      - /dkp/kommander/kubecost
      - /dkp/kommander/kubecost/*
    verbs:
      - get
      - head
      - post
      - put
      - delete
